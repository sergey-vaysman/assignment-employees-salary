{"version":3,"sources":["components/CreateEmployeeForm.js","components/Employee.js","components/EmployeeList.js","components/EmployeesPage.js","App.js","serviceWorker.js","index.js","reducers/index.js"],"names":["CreateEmployeeForm","props","emptyNewEmployee","newEmployeeName","newEmployeeSalary","onCreateEmployee","e","preventDefault","name","state","salary","resetForm","onNameChange","setState","target","value","onSalaryChange","onSubmit","this","className","type","onChange","placeholder","Component","Employee","console","log","onSalaryChanged","onEditSalaryClicked","onEditSalary","id","employee","style","paddingTop","class","aria-label","aria-describedby","onClick","EmployeeList","scope","employees","map","key","EmployeesPage","onDeleteAll","App","requestData","fetch","headers","method","body","JSON","stringify","then","response","json","dispatch","payload","connect","Boolean","window","location","hostname","match","store","createStore","action","concat","editEmployeeId","find","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ySA2DeA,G,kBAvDX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAIVC,iBAAmB,CACfC,gBAAiB,GACjBC,kBAAmB,IAPJ,EA4BnBC,iBAAmB,SAACC,GAChBA,EAAEC,iBACF,EAAKN,MAAMI,iBAAiB,CACxBG,KAAM,EAAKC,MAAMN,gBACjBO,OAAQ,EAAKD,MAAML,oBAEvB,EAAKO,aAlCU,EAyCnBC,aAAe,SAACN,GACZ,EAAKO,SAAS,CACVV,gBAAiBG,EAAEQ,OAAOC,SA3Cf,EA+CnBC,eAAiB,SAACV,GACd,EAAKO,SAAS,CACVT,kBAAmBE,EAAEQ,OAAOC,SA/ChC,EAAKN,MAAQ,EAAKP,iBAFH,E,sEAWf,OACI,0BAAMe,SAAUC,KAAKb,iBAAkBc,UAAU,gBAC7C,yBAAKA,UAAU,mCACX,yBAAKA,UAAU,YACX,2BAAOC,KAAK,OAAOD,UAAU,eAAeJ,MAAOG,KAAKT,MAAMN,gBAAiBkB,SAAUH,KAAKN,aAAcU,YAAY,wBAE5H,yBAAKH,UAAU,YACX,2BAAOC,KAAK,OAAOD,UAAU,eAAeJ,MAAOG,KAAKT,MAAML,kBAAmBiB,SAAUH,KAAKF,eAAgBM,YAAY,oCAEhI,yBAAKH,UAAU,YACX,4BAAQC,KAAK,SAASD,UAAU,mBAAhC,mD,kCAiBhBD,KAAKL,SAASK,KAAKhB,sB,GAxCMqB,cC4ClBC,E,YA1CX,WAAYvB,GAAQ,IAAD,6BACfwB,QAAQC,IAAI,gCAAiCzB,IAC7C,4CAAMA,KAMV0B,gBAAkB,SAACrB,GACf,EAAKO,SAAS,CACVH,OAAQJ,EAAEQ,OAAOC,SAVN,EAcnBa,oBAAsB,SAACtB,GACnBA,EAAEC,iBACF,EAAKN,MAAM4B,aAAa,CACpBC,GAAI,EAAK7B,MAAM8B,SAASD,GACxBpB,OAAQ,EAAKD,MAAMC,UAfvB,EAAKD,MAAQ,CACTC,OAAQ,EAAKT,MAAM8B,SAASrB,OAAOK,OAJxB,E,sEAwBf,OADAU,QAAQC,IAAI,2BAA4BR,KAAKjB,OAEzC,wBAAIkB,UAAU,iBACV,wBAAIa,MAAO,CAACC,WAAY,QAASf,KAAKjB,MAAM8B,SAASvB,MACrD,4BACA,yBAAK0B,MAAM,oBACP,2BAAOd,KAAK,OAAOc,MAAM,eAAeZ,YAAY,qBAAqBa,aAAW,eAAeC,mBAAiB,gBACpHrB,MAAOG,KAAKT,MAAMC,OAAQW,SAAUH,KAAKS,kBACzC,yBAAKO,MAAM,sBACP,4BAAQA,MAAM,4BAA4Bd,KAAK,SAASU,GAAG,gBAAgBO,QAASnB,KAAKU,qBAAzF,kE,GAlCDL,aCqBRe,EApBM,SAAArC,GAEjB,OADAwB,QAAQC,IAAI,gCAAiCzB,GAEzC,2BAAOkB,UAAU,uBACb,+BACI,4BACA,wBAAIoB,MAAM,OAAV,sBACA,wBAAIA,MAAM,OAAV,oCAGJ,+BACKtC,EAAMuC,UAAUC,KAAI,SAAAV,GAAQ,OACrB,kBAAC,EAAD,CAAUW,IAAKX,EAASD,GAAIC,SAAUA,EAAUF,aAAc5B,EAAM4B,qBCc7Ec,E,YAvBX,WAAY1C,GAAQ,IAAD,8BACf,4CAAMA,KAeV2C,YAAc,SAACtC,GACXA,EAAEC,iBACF,EAAKN,MAAM2C,eAlBI,E,sEAKf,OACI,yBAAKV,MAAM,aACP,kBAAC,EAAD,CAAoB7B,iBAAkBa,KAAKjB,MAAMI,mBACjD,kBAAC,EAAD,CAAcmC,UAAWtB,KAAKjB,MAAMuC,UAAWX,aAAcX,KAAKjB,MAAM4B,eACxE,0BAAMZ,SAAUC,KAAK0B,aACjB,4BAAQxB,KAAK,SAASD,UAAU,mBAAhC,uE,GAZQI,aCCtBsB,E,2MA2BFxC,iBAAmB,YAAqB,IAChCyC,EAAc,CACdtC,KAF+B,EAAlBA,KAGbE,OAAQ,CACJK,MAJ2B,EAAZL,SAOvBqC,MACI,uBACA,CACIC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,KAG5BO,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACtB,GACHN,QAAQC,IAAI,qBAAsBK,GAClC,EAAK9B,MAAMuD,SAAS,CAChBpC,KAAM,kBACNqC,QAAS,CACL1B,kB,EAMhBF,aAAe,YAAmB,IAAjBC,EAAgB,EAAhBA,GAAIpB,EAAY,EAAZA,OACjBe,QAAQC,IAAI,qBAAsBI,EAAIpB,GACtC,IAAIoC,EAAc,CACdhB,GAAIA,EACJpB,OAAQ,CACJK,MAAOL,IAGfqC,MACI,qBACA,CACIC,QAAS,CACP,OAAU,mBACV,eAAgB,oBAElBC,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,KAG5BO,MAAK,SAACC,GACH7B,QAAQC,IAAI,2BAA4B4B,GACxC,EAAKrD,MAAMuD,SAAS,CAChBpC,KAAM,cACNqC,QAAS,CACL3B,GAAIA,EACJpB,OAAQA,S,EAMxBkC,YAAc,WACVG,MACI,4BACA,CACIE,OAAQ,OACRC,KAAM,KAGbG,MAAK,SAACC,GAAD,OAAc,EAAKrD,MAAMuD,SAAS,CACpCpC,KAAM,mB,wEA9FV,OACI,yBAAKD,UAAU,OACX,kBAAC,EAAD,CAAeqB,UAAWtB,KAAKjB,MAAMuC,UACtBnC,iBAAkBa,KAAKb,iBACvBwB,aAAcX,KAAKW,aACnBe,YAAa1B,KAAK0B,iB,0CAKxB,IAAD,OAChBG,MAAM,sBACLM,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACb,GACHf,QAAQC,IAAI,kCAAmCc,GAC/C,EAAKvC,MAAMuD,SAAS,CAChBpC,KAAM,4BACNqC,QAAS,CACLjB,sB,GArBFjB,aA8GHmC,mBAPf,SAAyBjD,GAErB,OADAgB,QAAQC,IAAI,mBACL,CACHc,UAAW/B,EAAM+B,aAIVkB,CAAyBb,GCvGpBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCNAC,EAAQC,aCXC,WAAqD,IAAlCxD,EAAiC,uDAAzB,CAAC+B,UAAW,IAAK0B,EAAQ,uCAE/D,GADAzC,QAAQC,IAAI,oBAAqBwC,GACb,oBAAhBA,EAAO9C,KACP,MAAO,CACHoB,UAAW/B,EAAM+B,UAAU2B,OAAOD,EAAOT,QAAQ1B,WAGzD,GAAoB,8BAAhBmC,EAAO9C,KACP,MAAO,CACHoB,UAAW0B,EAAOT,QAAQjB,WAGlC,GAAoB,gBAAhB0B,EAAO9C,KAAwB,CAC/B,IAAIgD,EAAiBF,EAAOT,QAAQ3B,GAGpC,OAFerB,EAAM+B,UAAU6B,MAAK,SAAAtC,GAAQ,OAAIA,EAASD,KAAOsC,KACvD1D,OAAOK,MAAQmD,EAAOT,QAAQ/C,OAChC,CAAE8B,UAAW/B,EAAM+B,WAE9B,MAAoB,eAAhB0B,EAAO9C,KACA,CACHoB,UAAW,IAGZ/B,KDVX6D,IAASC,OACL,kBAAC,IAAD,CAAUP,MAAOA,GACb,kBAAC,EAAD,OAEJQ,SAASC,eAAe,SD+GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.0c2cf8d2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass CreateEmployeeForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = this.emptyNewEmployee;\r\n    }\r\n\r\n    emptyNewEmployee = {\r\n        newEmployeeName: '',\r\n        newEmployeeSalary: ''\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onCreateEmployee} className=\"block-margin\">\r\n                <div className=\"form-row justify-content-center\">\r\n                    <div className=\"col-auto\">\r\n                        <input type=\"text\" className=\"form-control\" value={this.state.newEmployeeName} onChange={this.onNameChange} placeholder=\"Имя\" />\r\n                    </div>\r\n                    <div className=\"col-auto\">\r\n                        <input type=\"text\" className=\"form-control\" value={this.state.newEmployeeSalary} onChange={this.onSalaryChange} placeholder=\"Оклад\" />\r\n                    </div>\r\n                    <div className=\"col-auto\">\r\n                        <button type=\"submit\" className=\"btn btn-primary\">Создать</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    onCreateEmployee = (e) => {\r\n        e.preventDefault();\r\n        this.props.onCreateEmployee({\r\n            name: this.state.newEmployeeName,\r\n            salary: this.state.newEmployeeSalary\r\n        });\r\n        this.resetForm();\r\n    }\r\n\r\n    resetForm() {\r\n        this.setState(this.emptyNewEmployee);\r\n    }\r\n\r\n    onNameChange = (e) => {\r\n        this.setState({\r\n            newEmployeeName: e.target.value\r\n        });\r\n    }\r\n\r\n    onSalaryChange = (e) => {\r\n        this.setState({\r\n            newEmployeeSalary: e.target.value\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport default CreateEmployeeForm;\r\n","import React, { Component } from 'react';\r\n\r\nclass Employee extends Component {\r\n\r\n    constructor(props) {\r\n        console.log('employee constructor, props: ', props);\r\n        super(props);\r\n        this.state = {\r\n            salary: this.props.employee.salary.value\r\n        };\r\n    }\r\n\r\n    onSalaryChanged = (e) => {\r\n        this.setState({\r\n            salary: e.target.value\r\n        });\r\n    }\r\n\r\n    onEditSalaryClicked = (e) => {\r\n        e.preventDefault();\r\n        this.props.onEditSalary({\r\n            id: this.props.employee.id,\r\n            salary: this.state.salary\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log('render employee, props: ', this.props);\r\n        return (\r\n            <tr className=\"employee-item\">\r\n                <td style={{paddingTop: '1em'}}>{this.props.employee.name}</td>\r\n                <td>\r\n                <div class=\"input-group mb-3\">\r\n                    <input type=\"text\" class=\"form-control\" placeholder=\"Salary-placeholder\" aria-label=\"Salary-label\" aria-describedby=\"btnEditSalary\"\r\n                    value={this.state.salary} onChange={this.onSalaryChanged} />\r\n                    <div class=\"input-group-append\">\r\n                        <button class=\"btn btn-outline-secondary\" type=\"button\" id=\"btnEditSalary\" onClick={this.onEditSalaryClicked} >Сохранить</button>\r\n                    </div>\r\n                </div>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Employee;","import React from 'react';\r\nimport Employee from './Employee';\r\n\r\nconst EmployeeList = props => {\r\n    console.log('render employee list, props: ', props);\r\n    return (\r\n        <table className=\"table employee-list\">\r\n            <thead>\r\n                <tr>\r\n                <th scope=\"col\">Имя</th>\r\n                <th scope=\"col\">Оклад</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {props.employees.map(employee => (\r\n                        <Employee key={employee.id} employee={employee} onEditSalary={props.onEditSalary} />\r\n                    )\r\n                )}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default EmployeeList;\r\n","import React, { Component } from 'react';\r\nimport CreateEmployeeForm from './CreateEmployeeForm';\r\nimport EmployeeList from './EmployeeList';\r\n\r\nclass EmployeesPage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"container\">\r\n                <CreateEmployeeForm onCreateEmployee={this.props.onCreateEmployee} />\r\n                <EmployeeList employees={this.props.employees} onEditSalary={this.props.onEditSalary} />\r\n                <form onSubmit={this.onDeleteAll}>\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Удалить все</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onDeleteAll = (e) => {\r\n        e.preventDefault();\r\n        this.props.onDeleteAll();\r\n    }\r\n\r\n}\r\n\r\nexport default EmployeesPage;\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport EmployeesPage from './components/EmployeesPage';\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div className=\"App\">\n                <EmployeesPage employees={this.props.employees} \n                               onCreateEmployee={this.onCreateEmployee}\n                               onEditSalary={this.onEditSalary}\n                               onDeleteAll={this.onDeleteAll} />\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        fetch('/api/all_employees')\n        .then((response) => response.json())\n        .then((employees) => {\n            console.log('GET /api/all_employees result: ', employees);\n            this.props.dispatch({\n                type: 'FETCH_EMPLOYEES_SUCCEEDED',\n                payload: {\n                    employees\n                }\n            });\n        });\n    }\n\n    onCreateEmployee = ({name, salary}) => {\n        var requestData = {\n            name: name,\n            salary: {\n                value: salary\n            }\n        };\n        fetch(\n            '/api/create_employee',\n            {\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json'\n                },\n                method: 'POST',\n                body: JSON.stringify(requestData)\n            }\n        )\n        .then((response) => response.json())\n        .then((employee) => {\n            console.log('created employee: ', employee);\n            this.props.dispatch({\n                type: 'CREATE_EMPLOYEE',\n                payload: {\n                    employee\n                }\n            });\n        });\n    }\n\n    onEditSalary = ({id, salary}) => {\n        console.log('App.onEditSalary: ', id, salary);\n        var requestData = {\n            id: id,\n            salary: {\n                value: salary\n            }\n        };\n        fetch(\n            '/api/edit_employee',\n            {\n                headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json'\n                },\n                method: 'POST',\n                body: JSON.stringify(requestData)\n            }\n        )\n        .then((response) => {\n            console.log('edit_employee response: ', response);\n            this.props.dispatch({\n                type: 'EDIT_SALARY',\n                payload: {\n                    id: id,\n                    salary: salary\n                }\n            });\n        });\n    }\n\n    onDeleteAll = () => {\n        fetch(\n            '/api/remove_all_employees',\n            {\n                method: 'POST',\n                body: ''\n            }\n        )\n        .then((response) => this.props.dispatch({\n            type: 'DELETE_ALL'\n        }));\n    }\n\n}\n\nfunction mapStateToProps(state) {\n    console.log('mapStateToProps');\n    return {\n        employees: state.employees\n    }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport employees from './reducers';\nimport { Provider } from 'react-redux';\n\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nconst store = createStore(employees);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\r\nexport default function employees(state = {employees: []}, action) {\r\n    console.log('reducer, action: ', action);\r\n    if (action.type === 'CREATE_EMPLOYEE') {\r\n        return {\r\n            employees: state.employees.concat(action.payload.employee)\r\n        };\r\n    }\r\n    if (action.type === 'FETCH_EMPLOYEES_SUCCEEDED') {\r\n        return {\r\n            employees: action.payload.employees\r\n        }\r\n    }\r\n    if (action.type === 'EDIT_SALARY') {\r\n        var editEmployeeId = action.payload.id;\r\n        var employee = state.employees.find(employee => employee.id === editEmployeeId);\r\n        employee.salary.value = action.payload.salary;\r\n        return { employees: state.employees };\r\n    }\r\n    if (action.type === 'DELETE_ALL') {\r\n        return {\r\n            employees: []\r\n        }\r\n    }\r\n    return state;\r\n}"],"sourceRoot":""}